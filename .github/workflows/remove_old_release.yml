name: Delete Old Releases

on:
  schedule:
    - cron: '0 0 * * *' # Run every day at midnight
  workflow_dispatch:
  
jobs:
  delete-old-releases:
    runs-on: self-hosted
    permissions: write-all
    steps:
      - name: Get Releases
        uses: actions/github-script@v6
        id: get-releases
        with:
          script: |
            const { data } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            core.setOutput('releases', JSON.stringify(data));
      - name: Delete Releases
        uses: actions/github-script@v6
        with:
          script: |
            const releases = JSON.parse('${{ steps.get-releases.outputs.releases }}');
            let latestRelease = null;
            for (const release of releases) {
              if (latestRelease === null || new Date(release.created_at) > new Date(latestRelease.created_at)) {
                latestRelease = release;
              }
            }
            for (const release of releases) {
              if (release.id !== latestRelease.id) {
                console.log(`Deleting release ${release.tag_name}...`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                console.log(`Deleted release ${release.tag_name}.`);
              }
            }      
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get Tags
        uses: actions/github-script@v6
        id: get-tags
        with:
          script: |
            const { data } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            core.setOutput('tags', JSON.stringify(data));
      - name: Delete Tags
        uses: actions/github-script@v6
        with:
          script: |
            const tags = JSON.parse('${{ steps.get-tags.outputs.tags }}');
            // assume the first tag is the latest
            let latestTag = tags[0];
            for (const tag of tags) {
              if (tag !== latestTag) {
                console.log(`Deleting tag ${tag.name}...`);
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${tag.name}`
                });
                console.log(`Deleted tag ${tag.name}.`);
              }
            }
