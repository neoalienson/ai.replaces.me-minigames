name: Release Flutter website

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: self-hosted
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Test
        run: sudo flutter build web --base-href "/minigames/"

      - name: Build
        run: sudo flutter build web --base-href "/minigames/"
      
      - name: Zip artifact
        run: |
          zip -r flutter.zip build/web
          
      - name: Upload artifact
        id: upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: flutter
          path: flutter.zip
          
  release:
    needs: [build]  
    runs-on: self-hosted
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get latest tag
        id: latest_tag
        uses: actions/github-script@v6
        with:
          script: |
            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            return "v" + (parseInt(tags[0].name.slice(1)) + 1);
      - name: Create release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: { id: release_id } } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: ${{ steps.latest_tag.outputs.result }},
            });
            return release_id;
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: flutter
          path: .
          
      - name: Upload zip file
        id: upload-release-asset
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.result }},
              name: "flutter.zip",
              data: fs.readFileSync("flutter.zip"),
              headers: {
                'content-type': 'application/zip',
              },
            });
